@DATABASE iGame.guide
@$VER: iGame.guide 2.0b6 (04.09.2020)
@INDEX "Index"
@wordwrap

@NODE "Main" "iGame documentation"
@{jcenter}
iGame
=============================================
(c) 2005-2020 Emmanuel Vasilakis
@{jleft}
@{lindent 3}
@{" Introduction    " LINK "INTR" 0} - About iGame
@{" History         " LINK "HIST" 0} - History of iGame
@{" Building iGame  " LINK "BUIL" 0} - Building iGame
@{" Requirements    " LINK "REQS" 0} - System requirements

@{" Installation    " LINK "INST" 0} - Installing iGame
@{" Usage           " LINK "USAG" 0} - Using iGame

@{" Todo            " LINK "TODO" 0} - Todo stuff
@{" Known bugs      " LINK "BUGS" 0} - Known bugs
@{" Author          " LINK "INFO" 0} - Author contact info
@{" Changelog       " LINK "CHNG" 0} - Version changelog

@ENDNODE

@NODE "INTR" "Introduction"
@{lindent 3}
iGame is a frontend application for your games and demos collection. It runs on AmigaOS 2.04 and above, AmigaOS 4 and MorphOS.

Features

 - Multiple WHDLoad slaves repositories on hard disk partitions
 - On demand scanning in repositories for installed WHDLoad slaves (games, demos etc.)
 - Use games' tooltypes on run
 - Shows game screenshots (screenshot window can be altered through tooltypes, uses datatypes to load foreign  formats)
 - Categorization of the games and filtering
 - Manual addition of non-WHDLoad games, demos etc.
 - Simple statistics
 - Find-as-you-type search filter

iGame can "discover" your games on pre-defined repositories and create a small database. You can then categorize each game according to it's genre, provide a small image to be displayed when the game is selected and quickly find the one you're looking for using the Filter gadget.

But iGame can support more than just WHDLoad games or demos. You can add and launch any type of executable, though it mostly makes sense if it's a game ;-)

iGame was initially developed on an Amiga 3000 with a CSMKII 68060 with 128MB RAM, using the Cubic IDE (gcc). Nowadays, I'm using Emacs on linux and vbcc as a cross compiler.

iGame is open source and free software, licensed under the GPL.

https://github.com/MrZammler/iGame
http://winterland.no-ip.org/igame/index.html

@ENDNODE

@NODE "HIST" "History"
@{lindent 3}
And a bit of history:

iGame started in ~2004/5 as a way to learn a bit of MUI and general Amiga system coding. Through the years it's been updated with various new small features and bug fixes. After version 1.5, iGame was updated with internal version 1.6 which was never really officially released. Sorry; I wasn't very good at releasing versions or keeping a changelog.

Since then Dimitris Panokostas, George Sokianos, Chris Charabaruk and T0lk13n did a lot of re-writing and new features (such as the settings window to replace tooltypes). These versions are now tagged as 2.0 betas.

@ENDNODE
@NODE "BUIL" "Building iGame"
@{lindent 3}
iGame is open source and free software, licensed under the GPL. This means you can have access to the source and compile it yourself. How to do it is described at the following URL, were various Operating Systems are covered.

https://github.com/MrZammler/iGame/wiki/Compiling-iGame

@ENDNODE

@NODE "REQS" "Requirements"
@{lindent 3}
@{b}Hardware requirements@{ub}

@{u}Minimum requirements@{uu}

 - Amiga Computer (obviously)
 - 68000 processor
 - 2MB Fast Ram

@{u}Recommended requirements@{uu}

 - Amiga Computer (obviously)
 - 68030 processor
 - 16MB Fast Ram

Depending of the number of WHDLoad slaves (games, demos etc.) more available memory might be required.

On a 68030 processor, it takes a while to scan and list the games. It takes about 2 minutes for a complete scan of 2000 games (~3G data) on a SFS formatted partition.

On a 68060 processor with ~200 games, scanning takes ~30 secs and listing/sorting less than 1 sec.

@{b}Software requirements@{ub}

iGame uses Magic User Interface (MUI) and some third party libraries. Depending your configuration the software requirements might change. In any case iGame will inform you about the missing required libraries if you run it from the shell.

All the required software can be found on Aminet.

@{u}Minimum requirements@{uu}

 - Kickstart 2.04 or higher
 - Workbench 2.1 or higher
 - MUI 3.8 or higher
 - guigfx.library
 - render.library
 - guigfx.mcc
 - Texteditor.mcc

If your Amiga has a 68000 CPU make sure that the libraries you have installed support it, i.e. there is a different MCC_TextEditor package for this processor. The same applies on CPUs that do not have FPU.

@ENDNODE

@NODE "INST" "Installation"
@{lindent 3}
@{b}Installer@{ub}

In iGame archive you will find an installation script, which you can use to install iGame on your hard disk. The installer recognizes the OS version and the available CPU, and proposes the best binary for you, but at the end you can choose exactly what you want to use.

Have in mind that the installer will not install any of the needed third party libraries. These must be installed by yourself.

@{b}Manual Installation@{ub}

You can install iGame manually if you prefer. To do that, you need to follow the following steps:

@{lindent 8}
1. Unpack the archive wherever you want.
2. Copy iGame drawer anywhere on your hard disk.
3. There are different executables of iGame based on CPU and Operating System. You need to find the one that is for your system and rename it as iGame.
@{tab}These are:
@{tab}iGame for 68000/68010/68020 CPUs
@{tab}iGame.030 for 68030 CPU
@{tab}iGame.040 for 68040 CPU
@{tab}iGame.060 for 68060 CPU
@{tab}iGame.OS4 for AmigaOS 4 and PPC CPUs
@{tab}iGame.MOS for MorphOS and PPC CPUs
4. Make sure igame.iff file is in the same directory as the binary.
5. Install required libs and MCCs suitable for your system.
6. Run iGame!

@{lindent 3}
iGame saves it's support files in it's own folder (PROGDIR:), so we recommend you to put it on it's own separated directory.

If you upgrade from a previous release, the only thing you need to do is to copy the new executable over the previous one. Make sure to keep the igame.prefs, gameslist.csv, genres and repos.prefs files!

@{b}-- NOTE:@{ub}

Make sure that render.library and guigfx.library are supported by your system and processor. If iGame fails with a Guru Meditation 8000000B or similar on startup, double check the libraries.

If it still persists, check http://winterland.no-ip.org/igame/files.html, where you will find an archive of these 2 libraries for systems with 020/no fpu (thanks to Jools 'buzz' Smyth for providing them!). These libraries might fix issues on 68030/882 systems.

If the problem is not gone, add the NOGUIGFX tooltype to iGame. This option will use MUI's internal datatypes loading routines (dtpic.mui) instead of guigfx.mcc's. In this case though, there will be no scaling of the used screenshots. This means that all the screenshots should have the same height and width, so to keep the GUI consistent.

@ENDNODE
@NODE "USAG" "Using iGame"
@{lindent 3}
The first thing to do, when you start iGame for the first time, is to add
one or more "repositories", i.e. paths on your system drives that you have
games installed.

For example, you might have a whole partition dedicated to games, or a
folder inside a partition. So, add a repository ;-)

Next step is to scan the repositories. iGame searches for slave files. After
the search, the results are saved to disk, so you only need to do this once.
(or whenever you add or remove a game to your repository so iGame can keep an
up-to-date database).

The list will be populated with the results, the game title that will appear will
be the directory name where each slave was located, or the title from the slave
file, if it containes one.

Multiple slaves for the same game will be suffixed with the 'Alt' word.

Then, just double-click on a game, and it will run! The list can be filtered
by typing a part of the game name you're looking for, or by using the genres list
on the right. If the slave file has an .info file associated with it, it will
use whatever tooltypes there are in the .info file, else it will launch it with
whdload default parameters.

You can edit some game's properties from the "Game properties" menu. You can change
the title, the genre so it will be filtered accordingly, whether it's one of your
favorites, and the games tooltypes, as you would do in it's info file.

You can also choose to hide the game from the list. It will not appear in any searching
or genre filtering. Choose "Show/Hide hidden slaves" from the menu, to list those slaves.
To go back to normal games listing, click on the same menu item again.

From the menu, you can also open up the drawer containing the game.

To add a screenshot to appear when a game is selected, simply save an image in
the game's folder with the name igame.iff. Note, the image can be of any type
as long as you have the proper datatype installed. It should however still
have .iff as it's extension, even though it may be a png file.

Under some circumstances, newicons icons from games could be displayed on the screenshot box.
This is still under testing.

The genres list on the right side of the application is stored in a file called 'genres'.
This file must be in the same directory as iGame itself. To add or remove genres
just edit this file with your favorite editor.

There are a few toolypes you can set to configure iGame. The SCREENSHOT tooltype
will define the size of the screenshot part of the application. Use whatever
size it fits your display. Any image will be scaled to fit that part. Use
SCREENSHOT=WIDTHxHEIGHT to define it. Default is half the PAL low res screenmode (160x128).

FILTERUSEENTER causes the filter to wait for an enter instead of searching as you
type. This is useful for slower machines.

SAVESTATSONEXIT: Use this tooltype to let iGame know you don't need saving your games
statistics each time a game is launched. Instead it will save them when you quit iGame.
Of course this implies that if a game crashes and the amiga is rebooted, statistics are
lost.

Since version 1.3, the 'update_titles' utility is included. It is intended for
people who used iGame before 1.3. Update_titles will scan your slave files
from the gameslist, extract titles from the slaves and update the gameslist
file. To use, open a shell window, go to the dir where iGame is installed and
run update_titles (no options). You may wish to keep a copy of gameslist file
in case something goes wrong or you dont like the titles from the slaves. The
gameslist file and update_lists must be in the same dir. Remember to use a good
amount of stack before running (32000 should be ok).

Most of the other parts of iGame should be easy to figure. ;-)

@ENDNODE
@NODE "TODO" "Todo"

- Ability to edit global whdload settings.

- Should be possible to retreive game info from a site or something
  (title, genre, publisher, etc).

- Way to display a readme file that comes with the game.

- Fix bugs!

Many people have contacted me with lots of suggestions and feature requests.
Best way now, is to open an issue on github.

@ENDNODE
@NODE "BUGS" "Known bugs/limitations"

- Some Muforce hits have been reported, trying to fix those.

- If you find anything, please let me know, either with an email, or better
yet with an issue on github.

@ENDNODE
@NODE "INFO" "Author info"

If you wish to contact me:

Emmanuel Vasilakis
mrzammler\@mm.st

or, pop to #amigahellas channel in gr.net (nana.irc.gr).

There is also a thread on eab that you could post suggestions/bugs:
http://eab.abime.net/showthread.php?t=28771

or, just use the issue tracker on github.

Icons and pics by Animagic and Emmanouela Panterh.

Many thanks to all those people who contacted me about iGame!

@ENDNODE
@NODE "CHNG" "Version changelog"

Here's a list of changes:

  Work in progress builds (iGame-2015-11-07.lha):

        Fix a GR when selecting Game Properties without having selected a game. (Thanks @AllanU74)

  Work in progress builds (iGame-2015-02-13.lha):

        Adjusts screenshot box according to workbench resolution.

  Work in progress builds (iGame-2014-08-13.lha):

        Now compiled with vbcc. Should produce a slightly faster build.
        Builds for 030 and 060.
        Fixed OS4 crashes (mainly during search).
        Added SAVESTATSONEXIT tooltype.
        Faster initial loading.
        Under some circumstances, iGame now loads games icons.
        Some other small changes done during a few years of on/off coding.

  1.5 (12/08/08):

	Genres are now in an external file.
	Added "--Never Played--".
	Reworked "Show/Hide hidden slaves".
	Filter will now work together with genres.
	Added FILTERUSEENTER.
	Added indication when writing to disk.

  1.4 (08/12/07):

	Editable tooltypes.
	Speed increase while listing games.
	Misc bug fixes.

  1.3 (28/04/07):

	Added the NOGUIGFX tooltype.
	Added keyboard shortcut to Game Properties (Right A + P).
	Added option to hide a slave.
	iGame will now launch a slave, even without an info file (with default tooltypes).
	Reads titles from slave files.
	Added the update_titles app.
	'Alt' suffix is used for multiple slaves.

  1.2 (06/04/2007):

	Fixed screenshot size to be consistent when changing images.
	Search .info files only when launching games.
	Counters now work for genres filtering.

  1.1 (27/03/2007):

	Fixed a nasty bug that caused iGame to sometimes list wrong titles
    (or no titles at all) after a scan.
	Added MUI Settings.

  1.0 (17/03/2007):

	Too many things changed to list here.
	Released ;-)

  0.2 (30/07/2005):

	iGame finds the tooltypes from the game's icon and uses them.

  0.1-23052005 (23/05/2005):

	Games that have their data stored in a sub-dir, now run.

  0.1-05052005 (05/05/2005):

	First test version.

@ENDNODE


@{BODY}


